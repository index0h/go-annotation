package annotation

import (
	"github.com/pkg/errors"
	"io/ioutil"
	"os"
	"path/filepath"
)

// Default prefix for file rendering.
// Annotation FileIsGenerated is used internally to check, that file could be overwritten.
const Header = "" +
	"// Generated by github.com/index0h/go-annotation\n" +
	"// DO NOT EDIT\n" +
	"// @FileIsGenerated(true)\n"

type GeneratedFileWriter struct {
	validator Validator
	renderer  Renderer
}

func NewGeneratedFileWriter(validator Validator, renderer Renderer) *GeneratedFileWriter {
	if validator == nil {
		panic(errors.New("Variable 'validator' must be not nil"))
	}

	if renderer == nil {
		panic(errors.New("Variable 'renderer' must be not nil"))
	}

	return &GeneratedFileWriter{validator: validator, renderer: renderer}
}

// Renders and writes File models without content.
func (w *GeneratedFileWriter) Write(storage *Storage) {
	if err := w.validator.Validate(storage); err != nil {
		panic(err)
	}

	for _, namespace := range storage.Namespaces {
		if namespace.IsIgnored {
			continue
		}

		for _, file := range namespace.Files {
			if file.Content == "" {
				file.Content = Header + w.renderer.Render(file)

				if err := os.MkdirAll(namespace.Path, os.ModePerm); err != nil {
					panic(err)
				}

				filePath := filepath.Join(namespace.Path, file.Name)

				if _, err := os.Stat(filePath); !os.IsNotExist(err) {
					panic(errors.Errorf("File '%s' already exists", filePath))
				}

				if err := ioutil.WriteFile(filePath, []byte(file.Content), 0666); err != nil {
					panic(err)
				}
			}
		}
	}
}
